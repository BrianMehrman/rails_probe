'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = docPropType;

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getArgs(args) {
  return args.map(function (arg) {
    if (arg.type && _propTypes2.default[arg.type]) {
      if (arg.args) {
        return _propTypes2.default[arg.type](arg.args);
      }
      return _propTypes2.default[arg.type];
    }
    return arg;
  });
}

function getPropType(validate) {
  return _propTypes2.default[validate.type](validate.args.type && _propTypes2.default[validate.args.type] ? _propTypes2.default[validate.args.type] : validate.args);
}

// function to recursively build the proptype for shape
function buildShapePropType(validate) {
  var args = {};
  Object.keys(validate.args).forEach(function (arg) {
    var element = validate.args[arg];
    if (element.type && _propTypes2.default[element.type]) {
      if (element.args) {
        if (element.type === 'oneOfType') {
          var elementArgs = getArgs(element.args);
          args[arg] = _propTypes2.default[element.type](elementArgs);
        } else if (element.type === 'shape') {
          args[arg] = buildShapePropType(element);
        } else {
          args[arg] = getPropType(element);
        }
      } else {
        args[arg] = _propTypes2.default[element.type];
      }
    } else if (element.type) {
      throw new Error('docPropType: unknown type ' + element.type);
    }
  });

  return _propTypes2.default[validate.type](args);
}

function docPropType(validate, description) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  if (!description) {
    throw new Error('docPropType: description is required');
  }
  if (!validate) {
    throw new Error('docPropType: validate is required');
  }

  var required = options.required;

  var type = validate;
  if (validate.type && _propTypes2.default[validate.type]) {
    if (validate.args) {
      if (validate.type === 'oneOfType') {
        var args = getArgs(validate.args);
        type = _propTypes2.default[validate.type](args);
      } else if (validate.type === 'shape') {
        type = buildShapePropType(validate);
      } else {
        type = getPropType(validate);
      }
    } else {
      type = _propTypes2.default[validate.type];
    }
  } else if (validate.type) {
    throw new Error('docPropType: unknown type ' + validate.type);
  }
  // clone function
  var propType = type.bind(null);
  if (type.isRequired) {
    propType.isRequired = type.isRequired.bind(null);
  }
  if (required && propType.isRequired) {
    propType = propType.isRequired;
  }
  propType.$$reactDesc = { description: description, validate: validate, options: options };
  return propType;
}